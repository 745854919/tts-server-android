name: Build Test

on:
  push:
    branches:
      - "master"
      - "dev"
    paths-ignore:
      - "**.md"
      - "crowdin.yml"
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: 1.19.1

      - name: Build tts-server-lib
        run: |
          cd tts-server-lib
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init
          go get golang.org/x/mobile/bind
          gomobile bind -ldflags "-s -w" -v -androidapi=19
          cp -f *.aar $GITHUB_WORKSPACE/app/libs

        uses: actions/upload-artifact@v3.1.0
        with:
          name: tts-server-lib
          path: tts-server-lib/*.aar

  build:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        name: tts-server-lib
        path: ${{ github.workspace }}/app/libs

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Init Signature
        run: |
          touch local.properties
          echo ALIAS_NAME='${{ secrets.ALIAS_NAME }}' >> local.properties
          echo ALIAS_PASSWORD='${{ secrets.ALIAS_PASSWORD }}' >> local.properties
          echo KEY_PASSWORD='${{ secrets.KEY_PASSWORD }}' >> local.properties
          echo KEY_PATH='./key.jks' >> local.properties
          # 从Secrets读取无换行符Base64解码, 然后保存到到app/key.jks
          echo ${{ secrets.KEY_STORE }} | base64 --decode > $GITHUB_WORKSPACE/app/key.jks

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew assembleRelease --build-cache --parallel --daemon --warning-mode all

      - name: Organize the Files
        run: |
          mkdir -p ${{ github.workspace }}/output/app
          mkdir -p ${{ github.workspace }}/output/dev
          rm -f ${{ github.workspace }}/output/app/*
          rm -f ${{ github.workspace }}/output/dev/*
          
          cp ${{ github.workspace }}/app/build/outputs/apk/app/release/*.apk ${{ github.workspace }}/output/app
          cp ${{ github.workspace }}/app/build/outputs/apk/app/release/*.json ${{ github.workspace }}/output/app
          cp ${{ github.workspace }}/app/build/outputs/apk/dev/release/*.apk ${{ github.workspace }}/output/dev
          cp -r ${{ github.workspace }}/app/build/outputs/mapping ${{ github.workspace }}/output/

      - name: Get VerName
        run: |
          echo "ver_name=$(grep -m 1 'versionName' output/app/output-metadata.json | cut -d\" -f4)" >> $GITHUB_ENV

      - name: Upload Mappings to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: mappings_${{ env.ver_name }}
          path: ${{ github.workspace }}/output/mapping

      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "TTS-Server_原版_${{ env.ver_name }}"
          path: ${{ github.workspace }}/output/app/*${{ env.ver_name }}.apk

      - name: Upload Dev App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "TTS-Server_Dev共存版_${{ env.ver_name }}"
          path: ${{ github.workspace }}/output/dev/*${{ env.ver_name }}.apk
